}
cat("Iter", b, ":  A =", fe_b["A"], " k =", fe_b["k"], "\n")
draws[b, ] <- unname(fe_b)
start_vals <- fe_b
}
if (length(skipped) > 0) {
message("Skipped iterations: ", paste(skipped, collapse = ", "))
} else {
message("No iterations skipped 🎉")
}
as.data.frame(draws)
}
# Import data and derive weight regain
data_raw <- read_csv("data/data_sheet.csv")
data_raw <- data_raw %>% mutate(study = as.factor(study))
data_regain <- calculate_weight_regain(data_raw)
# Fit model
model <- fit_nlme_exp_recovery(data_regain, method="ML")
set.seed(42)
regain_parametric_bootstrap <- parametric_bootstrap(model, data_regain, B = 1000)
summary(regain_parametric_bootstrap)
x_grid <- seq(0, 60, by = 0.1)
# Create matrix where rows = bootstrap draws, columns = x_grid
pred_matrix <- sapply(seq_len(nrow(parametric_bootstrap)), function(i) {
A_i <- parametric_bootstrap$A[i]; k_i <- parametric_bootstrap$k[i]
A_i * (1 - exp(-k_i * x_grid))
})
View(regain_parametric_bootstrap)
x_grid <- seq(0, 60, by = 0.1)
# Create matrix where rows = bootstrap draws, columns = x_grid
pred_matrix <- sapply(seq_len(nrow(regain_parametric_bootstrap)), function(i) {
A_i <- regain_parametric_bootstrap$A[i]; k_i <- regain_parametric_bootstrap$k[i]
A_i * (1 - exp(-k_i * x_grid))
})
# rows = x_grid, cols = bootstrap draws
pred_matrix <- t(pred_matrix)
# 95% confidence interval
pred_mean <- apply(pred_matrix, 2, mean, na.rm = TRUE)
pred_lo   <- apply(pred_matrix, 2, quantile, probs = 0.025, na.rm = TRUE)
pred_hi   <- apply(pred_matrix, 2, quantile, probs = 0.975, na.rm = TRUE)
pred_df <- data.frame(
x   = x_grid,
mean = pred_mean,
lo   = pred_lo,
hi   = pred_hi
)
p <- create_weight_regain_plot(data_regain, model, "study")
p <- p + geom_ribbon(data = pred_df,
aes(x = wks_after_cessation, ymin = lo, ymax = hi),
inherit.aes = FALSE,          # <-- key line
fill = "lightgray", alpha = 0.3)
p
p <- create_weight_regain_plot(data_regain, model, "study")
p <- p + geom_ribbon(data = pred_df,
aes(x = x_grid, ymin = lo, ymax = hi),
inherit.aes = FALSE,          # <-- key line
fill = "lightgray", alpha = 0.3)
p
ggsave("figures/graph_fixed_effect_confidence_interval_parametric_bootstrap.png", plot = p, width = 8, height = 6, dpi = 300)
library(tidyverse)
library(ggplot2)
source("R/calculate_weight_regain.R")
source("R/fit_nlme_exp_recovery.R")
source("R/plot_weight_regain.R")
parametric_bootstrap <- function(fit, dat, B = 100) {
fe <- fixef(fit); A_hat <- unname(fe["A"]); k_hat <- unname(fe["k"])
tau <- as.numeric(VarCorr(fit)[1, "StdDev"]); if(!is.finite(tau)) tau <- 0
sigma_hat <- fit$sigma
dat <- transform(dat, study = as.factor(study))
studies  <- levels(dat$study)
study_id <- dat$study
x_vec    <- dat$wks_after_cessation
sem_vec  <- dat$weight_regain_sem
draws <- matrix(NA_real_, nrow=B, ncol=2, dimnames=list(NULL, c("A","k")))
start_vals <- c(A=A_hat, k=k_hat)
skipped <- integer(0)   # store failed iteration numbers
for (b in seq_len(B)) {
b_k <- rnorm(length(studies), 0, tau); names(b_k) <- studies
k_i <- k_hat + b_k[study_id]
mu_i <- A_hat * (1 - exp(-k_i * x_vec))
eps_i <- rnorm(nrow(dat), 0, sigma_hat * sem_vec)
y_sim <- mu_i + eps_i
dat_sim <- dat; dat_sim$weight_regain_pct <- y_sim
# attempt refit
fit_b <- tryCatch(
nlme(
weight_regain_pct ~ A * (1 - exp(-k * wks_after_cessation)),
data    = dat_sim,
fixed   = A + k ~ 1,
random  = k ~ 1 | study,
weights = varFixed(~ weight_regain_sem^2),
start   = start_vals
),
error = function(e) NULL
)
if (is.null(fit_b)) {
skipped <- c(skipped, b)
next
}
fe_b <- fixef(fit_b)
if (anyNA(fe_b)) {
skipped <- c(skipped, b)
next
}
cat("Iter", b, ":  A =", fe_b["A"], " k =", fe_b["k"], "\n")
draws[b, ] <- unname(fe_b)
start_vals <- fe_b
}
if (length(skipped) > 0) {
message("Skipped iterations: ", paste(skipped, collapse = ", "))
} else {
message("No iterations skipped 🎉")
}
as.data.frame(draws)
}
# Import data and derive weight regain
data_raw <- read_csv("data/data_sheet.csv")
data_raw <- data_raw %>% mutate(study = as.factor(study))
data_regain <- calculate_weight_regain(data_raw)
# Fit model
model <- fit_nlme_exp_recovery(data_regain, method="ML")
set.seed(42)
regain_parametric_bootstrap <- parametric_bootstrap(model, data_regain, B = 1000)
summary(regain_parametric_bootstrap)
x_grid <- seq(0, 60, by = 0.1)
# Create matrix where rows = bootstrap draws, columns = x_grid
pred_matrix <- sapply(seq_len(nrow(regain_parametric_bootstrap)), function(i) {
A_i <- regain_parametric_bootstrap$A[i]; k_i <- regain_parametric_bootstrap$k[i]
A_i * (1 - exp(-k_i * x_grid))
})
# rows = x_grid, cols = bootstrap draws
pred_matrix <- t(pred_matrix)
# 95% confidence interval
pred_mean <- apply(pred_matrix, 2, mean, na.rm = TRUE)
pred_lo   <- apply(pred_matrix, 2, quantile, probs = 0.025, na.rm = TRUE)
pred_hi   <- apply(pred_matrix, 2, quantile, probs = 0.975, na.rm = TRUE)
pred_df <- data.frame(
x   = x_grid,
mean = pred_mean,
lo   = pred_lo,
hi   = pred_hi
)
p <- create_weight_regain_plot(data_regain, model, "study")
p <- p + geom_ribbon(data = pred_df,
aes(x = x_grid, ymin = lo, ymax = hi),
inherit.aes = FALSE,          # <-- key line
fill = "lightgray", alpha = 0.3)
p
ggsave("figures/graph_fixed_effect_confidence_interval_parametric_bootstrap.png", plot = p, width = 8, height = 6, dpi = 300)
library(tidyverse)
library(ggplot2)
source("R/calculate_weight_regain.R")
source("R/fit_nlme_exp_recovery.R")
source("R/plot_weight_regain.R")
parametric_bootstrap <- function(fit, dat, B = 100) {
fe <- fixef(fit); A_hat <- unname(fe["A"]); k_hat <- unname(fe["k"])
tau <- as.numeric(VarCorr(fit)[1, "StdDev"]); if(!is.finite(tau)) tau <- 0
sigma_hat <- fit$sigma
dat <- transform(dat, study = as.factor(study))
studies  <- levels(dat$study)
study_id <- dat$study
x_vec    <- dat$wks_after_cessation
sem_vec  <- dat$weight_regain_sem
draws <- matrix(NA_real_, nrow=B, ncol=2, dimnames=list(NULL, c("A","k")))
start_vals <- c(A=A_hat, k=k_hat)
skipped <- integer(0)   # store failed iteration numbers
for (b in seq_len(B)) {
b_k <- rnorm(length(studies), 0, tau); names(b_k) <- studies
k_i <- k_hat + b_k[study_id]
mu_i <- A_hat * (1 - exp(-k_i * x_vec))
eps_i <- rnorm(nrow(dat), 0, sigma_hat * sem_vec)
y_sim <- mu_i + eps_i
dat_sim <- dat; dat_sim$weight_regain_pct <- y_sim
# attempt refit
fit_b <- tryCatch(
nlme(
weight_regain_pct ~ A * (1 - exp(-k * wks_after_cessation)),
data    = dat_sim,
fixed   = A + k ~ 1,
random  = k ~ 1 | study,
weights = varFixed(~ weight_regain_sem^2),
start   = start_vals
),
error = function(e) NULL
)
if (is.null(fit_b)) {
skipped <- c(skipped, b)
next
}
fe_b <- fixef(fit_b)
if (anyNA(fe_b)) {
skipped <- c(skipped, b)
next
}
cat("Iter", b, ":  A =", fe_b["A"], " k =", fe_b["k"], "\n")
draws[b, ] <- unname(fe_b)
start_vals <- fe_b
}
if (length(skipped) > 0) {
message("Skipped iterations: ", paste(skipped, collapse = ", "))
} else {
message("No iterations skipped 🎉")
}
as.data.frame(draws)
}
# Import data and derive weight regain
data_raw <- read_csv("data/data_sheet.csv")
data_raw <- data_raw %>% mutate(study = as.factor(study))
data_regain <- calculate_weight_regain(data_raw)
# Fit model
model <- fit_nlme_exp_recovery(data_regain, method="REML")
set.seed(42)
regain_parametric_bootstrap <- parametric_bootstrap(model, data_regain, B = 1000)
summary(regain_parametric_bootstrap)
x_grid <- seq(0, 60, by = 0.1)
# Create matrix where rows = bootstrap draws, columns = x_grid
pred_matrix <- sapply(seq_len(nrow(regain_parametric_bootstrap)), function(i) {
A_i <- regain_parametric_bootstrap$A[i]; k_i <- regain_parametric_bootstrap$k[i]
A_i * (1 - exp(-k_i * x_grid))
})
# rows = x_grid, cols = bootstrap draws
pred_matrix <- t(pred_matrix)
# 95% confidence interval
pred_mean <- apply(pred_matrix, 2, mean, na.rm = TRUE)
pred_lo   <- apply(pred_matrix, 2, quantile, probs = 0.025, na.rm = TRUE)
pred_hi   <- apply(pred_matrix, 2, quantile, probs = 0.975, na.rm = TRUE)
pred_df <- data.frame(
x   = x_grid,
mean = pred_mean,
lo   = pred_lo,
hi   = pred_hi
)
p <- create_weight_regain_plot(data_regain, model, "study")
p <- p + geom_ribbon(data = pred_df,
aes(x = x_grid, ymin = lo, ymax = hi),
inherit.aes = FALSE,          # <-- key line
fill = "lightgray", alpha = 0.3)
p
ggsave("figures/graph_fixed_effect_pointwise_confidence_interval_parametric_bootstrap.png", plot = p, width = 8, height = 6, dpi = 300)
model_rand_k <- nlme(
model = weight_regain_pct ~ exp_recovery(wks_after_cessation, A, k),
data = study_data,
fixed = A + k ~ 1,
random = k ~ 1 | study,
weights = varFixed(~ weight_regain_sem^2),
start = c(A = 100, k = 0.1)
)
model_rand_k <- nlme(
model = weight_regain_pct ~ A * (1 - exp(-k * wks_after_cessation)),
data = data_regain,
fixed = A + k ~ 1,
random = k ~ 1 | study,
weights = varFixed(~ weight_regain_sem^2),
start = c(A = 100, k = 0.1)
)
model_rand_A <- nlme(
model = weight_regain_pct ~ A * (1 - exp(-k * wks_after_cessation)),
data = data_regain,
fixed = A + k ~ 1,
random = A ~ 1 | study,
weights = varFixed(~ weight_regain_sem^2),
start = c(A = 100, k = 0.1)
)
model_rand_Ak <- nlme(
model = weight_regain_pct ~ A * (1 - exp(-k * wks_after_cessation)),
data = data_regain,
fixed = A + k ~ 1,
random = A + k ~ 1 | study,
weights = varFixed(~ weight_regain_sem^2),
start = c(A = 100, k = 0.1)
)
p <- create_weight_regain_plot(data_regain, model_randAk, "study")
# Draw graph
p <- create_weight_regain_plot(data_regain, model_rand_Ak, "study")
p
# Draw graph
p <- create_weight_regain_plot(data_regain, model_rand_A, "study")
p
AIC(model_rand_k)
AIC(model_rand_A)
AIC(model_rand_Ak)
# Draw graph
p <- create_weight_regain_plot(data_regain, model_rand_A, "study")
p
BIC(model_rand_k)
BIC(model_rand_A)
BIC(model_rand_Ak)
p <- create_weight_regain_plot(data_regain, model_rand_Ak, "study")
p
summary(model_rand_k)
summary(model_rand_A)
summary(model_rand_Ak)
ranef(model_rand_Ak)
conef(model_rand_Ak)
coef(model_rand_Ak)
ranef(model_rand_Ak)
library(tidyverse)
library(ggplot2)
source("R/calculate_weight_regain.R")
source("R/plot_weight_regain.R")
# Import data and derive weight regain
data_raw <- read_csv("data/data_sheet.csv")
data_raw <- data_raw %>% mutate(study = as.factor(study))
data_regain <- calculate_weight_regain(data_raw)
model_rand_k <- nlme(
model = weight_regain_pct ~ A * (1 - exp(-k * wks_after_cessation)),
data = data_regain,
fixed = A + k ~ 1,
random = k ~ 1 | study,
weights = varFixed(~ weight_regain_sem^2),
start = c(A = 100, k = 0.1)
)
model_rand_A <- nlme(
model = weight_regain_pct ~ A * (1 - exp(-k * wks_after_cessation)),
data = data_regain,
fixed = A + k ~ 1,
random = A ~ 1 | study,
weights = varFixed(~ weight_regain_sem^2),
start = c(A = 100, k = 0.1)
)
model_rand_Ak <- nlme(
model = weight_regain_pct ~ A * (1 - exp(-k * wks_after_cessation)),
data = data_regain,
fixed = A + k ~ 1,
random = A + k ~ 1 | study,
weights = varFixed(~ weight_regain_sem^2),
start = c(A = 100, k = 0.1)
)
summary(model_rand_k)
summary(model_rand_A)
summary(model_rand_Ak)
ranef(model_rand_Ak) # random effects on A collapse to near zero
# Draw graph
p_Ak <- create_weight_regain_plot(data_regain, model_rand_Ak, "study")
pA <- create_weight_regain_plot(data_regain, model_rand_A, "study")
pk <- create_weight_regain_plot(data_regain, model_rand_k, "study")
p
ggsave("figures/graph_random_effects_A.png", plot = pA, width = 8, height = 6, dpi = 300)
library(tidyverse)
library(ggplot2)
source("R/calculate_weight_regain.R")
source("R/plot_weight_regain.R")
# Import data and derive weight regain
data_raw <- read_csv("data/data_sheet.csv")
data_raw <- data_raw %>% mutate(study = as.factor(study))
data_regain <- calculate_weight_regain(data_raw)
model_rand_k <- nlme(
model = weight_regain_pct ~ A * (1 - exp(-k * wks_after_cessation)),
data = data_regain,
fixed = A + k ~ 1,
random = k ~ 1 | study,
weights = varFixed(~ weight_regain_sem^2),
start = c(A = 100, k = 0.1)
)
model_rand_A <- nlme(
model = weight_regain_pct ~ A * (1 - exp(-k * wks_after_cessation)),
data = data_regain,
fixed = A + k ~ 1,
random = A ~ 1 | study,
weights = varFixed(~ weight_regain_sem^2),
start = c(A = 100, k = 0.1)
)
model_rand_Ak <- nlme(
model = weight_regain_pct ~ A * (1 - exp(-k * wks_after_cessation)),
data = data_regain,
fixed = A + k ~ 1,
random = A + k ~ 1 | study,
weights = varFixed(~ weight_regain_sem^2),
start = c(A = 100, k = 0.1)
)
summary(model_rand_k)
summary(model_rand_A)
summary(model_rand_Ak)
ranef(model_rand_Ak) # random effects on A collapse to near zero
# Draw graph
p_Ak <- create_weight_regain_plot(data_regain, model_rand_Ak, "study")
p_A <- create_weight_regain_plot(data_regain, model_rand_A, "study")
p_k <- create_weight_regain_plot(data_regain, model_rand_k, "study")
ggsave("figures/graph_random_effects_A.png", plot = pA, width = 8, height = 6, dpi = 300)
library(tidyverse)
library(ggplot2)
source("R/calculate_weight_regain.R")
source("R/fit_nlme_exp_recovery.R")
source("R/plot_weight_regain.R")
# Import data and derive weight regain
data_raw <- read_csv("data/data_sheet.csv")
data_raw <- data_raw %>% mutate(study = as.factor(study))
data_regain <- calculate_weight_regain(data_raw)
# Fit model
model <- fit_nlme_exp_recovery(data_regain, method="ML")
summary(model)
# Draw graph
p <- create_weight_regain_plot(data_regain, model, "study")
ggsave("figures/graph_main.png", plot = p, width = 8, height = 6, dpi = 300)
p
library(tidyverse)
library(ggplot2)
source("R/calculate_weight_regain.R")
source("R/fit_nlme_exp_recovery.R")
source("R/plot_weight_regain.R")
# Import data and derive weight regain
data_raw <- read_csv("data/data_sheet.csv")
data_raw <- data_raw %>% mutate(study = as.factor(study))
data_regain <- calculate_weight_regain(data_raw)
# Fit model
model <- fit_nlme_exp_recovery(data_regain, method="ML")
summary(model)
# Draw graph
p <- create_weight_regain_plot(data_regain, model, "drug")
library(tidyverse)
library(ggplot2)
source("R/calculate_weight_regain.R")
source("R/fit_nlme_exp_recovery.R")
source("R/plot_weight_regain.R")
# Import data and derive weight regain
data_raw <- read_csv("data/data_sheet.csv")
data_raw <- data_raw %>% mutate(study = as.factor(study))
data_regain <- calculate_weight_regain(data_raw)
# Fit model
model <- fit_nlme_exp_recovery(data_regain, method="REML")
summary(model)
# Draw graph
p <- create_weight_regain_plot(data_regain, model, "study")
ggsave("figures/graph_main.png", plot = p, width = 8, height = 6, dpi = 300)
p
View(data_regain)
library(tidyverse)
library(ggplot2)
source("R/calculate_weight_regain.R")
source("R/fit_nlme_exp_recovery.R")
source("R/plot_weight_regain.R")
# Import data and derive weight regain
data_raw <- read_csv("data/data_sheet.csv")
data_raw <- data_raw %>% mutate(study = as.factor(study))
data_raw <- data_raw %>% mutate(drug = as.factor(drug))
data_regain <- calculate_weight_regain(data_raw)
# Fit model
model <- fit_nlme_exp_recovery(data_regain, method="REML")
summary(model)
# Draw graph
p <- create_weight_regain_plot(data_regain, model, "drug")
library(tidyverse)
library(ggplot2)
source("R/calculate_weight_regain.R")
source("R/fit_nlme_exp_recovery.R")
source("R/plot_weight_regain.R")
# Import data and derive weight regain
data_raw <- read_csv("data/data_sheet.csv")
data_raw <- data_raw %>% mutate(study = as.factor(study))
data_raw <- data_raw %>% mutate(drug = as.factor(drug))
data_regain <- calculate_weight_regain(data_raw)
# Fit model
model <- fit_nlme_exp_recovery(data_regain, method="REML")
summary(model)
# Draw graph
p <- create_weight_regain_plot(data_regain, model, "study")
ggsave("figures/graph_main.png", plot = p, width = 8, height = 6, dpi = 300)
p
library(tidyverse)
library(ggplot2)
source("R/calculate_weight_regain.R")
source("R/fit_nlme_exp_recovery.R")
source("R/plot_weight_regain.R")
# Import data and derive weight regain
data_raw <- read_csv("data/data_sheet.csv")
data_raw <- data_raw %>% mutate(study = as.factor(study))
data_regain <- calculate_weight_regain(data_raw)
# Fit model
model <- fit_nlme_exp_recovery(data_regain, method="REML")
summary(model)
# Draw graph
p <- create_weight_regain_plot(data_regain, model, "study")
ggsave("figures/graph_main.png", plot = p, width = 8, height = 6, dpi = 300)
p
model_rand_k <- nlme(
model = weight_regain_pct ~ A * (1 - exp(-k * wks_after_cessation)),
data = data_regain,
fixed = A + k ~ 1,
random = k ~ 1 | drug,
weights = varFixed(~ weight_regain_sem^2),
start = c(A = 100, k = 0.1)
)
# Draw graph
p <- create_weight_regain_plot(data_regain, model, "drug")
model_rand_k <- nlme(
model = weight_regain_pct ~ A * (1 - exp(-k * wks_after_cessation)),
data = data_regain,
fixed = A + k ~ 1,
random = k ~ 1 | drug,
weights = varFixed(~ weight_regain_sem^2),
start = c(A = 100, k = 0.1)
)
# Draw graph
p <- create_weight_regain_plot(data_regain, model_rand_k, "drug")
ggsave("figures/graph_main.png", plot = p, width = 8, height = 6, dpi = 300)
p
library(tidyverse)
library(ggplot2)
source("R/calculate_weight_regain.R")
source("R/fit_nlme_exp_recovery.R")
source("R/plot_weight_regain.R")
# Import data and derive weight regain
data_raw <- read_csv("data/data_sheet.csv")
data_raw <- data_raw %>% mutate(study = as.factor(study))
data_regain <- calculate_weight_regain(data_raw)
# Fit model
model <- fit_nlme_exp_recovery(data_regain, method="REML")
summary(model)
# Draw graph
p <- create_weight_regain_plot(data_regain, model, "study")
ggsave("figures/graph_main.png", plot = p, width = 8, height = 6, dpi = 300)
p
